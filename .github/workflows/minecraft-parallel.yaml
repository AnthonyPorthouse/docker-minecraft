name: Minecraft
on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *'
  pull_request:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io

jobs:
  get-versions:
    name: Get Minecraft Releases
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.versions.outputs.latest }}
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Minecraft Releases
        id: versions
        run: ./minecraft/build/get-minecraft-versions.sh

  build-vanilla:
    name: Build Minecraft ${{ matrix.version.id }}
    needs: get-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.get-versions.outputs.versions) }}
    permissions:
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/minecraft
      LATEST_VERSION: ${{ needs.get-versions.outputs.latest }}
      VERSION: ${{ toJSON(matrix.version) }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Build Info
        id: build-info
        run: ./minecraft/build/build-version.sh

      - name: Build Latest
        uses: docker/build-push-action@v3
        if: |
          steps.build-info.outputs.minecraft_version == env.LATEST_VERSION
          && steps.build-info.outputs.server_url != null
        with:
          context: minecraft
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.build-info.outputs.java_version }}-alpine

      - name: Build
        uses: docker/build-push-action@v3
        if: |
          steps.build-info.outputs.minecraft_version != env.LATEST_VERSION
          && steps.build-info.outputs.server_url != null
        with:
          context: minecraft
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.build-info.outputs.java_version }}-alpine

      - name: Push Latest
        uses: docker/build-push-action@v3
        if: |
          github.ref == 'refs/heads/main'
          && steps.build-info.outputs.minecraft_version == env.LATEST_VERSION
          && steps.build-info.outputs.server_url != null
        with:
          context: minecraft
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.build-info.outputs.java_version }}-alpine

      - name: Push
        uses: docker/build-push-action@v3
        if: |
          github.ref == 'refs/heads/main'
          && steps.build-info.outputs.minecraft_version != env.LATEST_VERSION
          && steps.build-info.outputs.server_url != null
        with:
          context: minecraft
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.build-info.outputs.java_version }}-alpine

  get-snapshot-versions:
    name: Get Minecraft Snapshot Releases
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.snapshot.outputs.latest }}
      versions: ${{ steps.snapshot.outputs.versions }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Minecraft Snapshot Releases
        id: snapshot
        run: ./minecraft/build/get-minecraft-snapshot.sh

  build-snapshot:
    name: Build Minecraft Snapshot ${{ matrix.version.id }}
    needs: get-snapshot-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.get-snapshot-versions.outputs.versions) }}
    permissions:
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/minecraft
      LATEST_VERSION: ${{ needs.get-snapshot-versions.outputs.latest }}
      VERSION: ${{ toJSON(matrix.version) }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Snapshot Build Info
        id: snapshot-build-info
        run: ./minecraft/build/build-snapshot.sh

      - name: Build Latest
        uses: docker/build-push-action@v3
        if: |
          steps.snapshot-build-info.outputs.minecraft_version == env.LATEST_VERSION
          && steps.snapshot-build-info.outputs.server_url != null
        with:
          context: minecraft
          tags: |
            ${{ env.IMAGE_NAME }}:latest-snapshot
            ${{ env.IMAGE_NAME }}:${{ steps.snapshot-build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.snapshot-build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.snapshot-build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.snapshot-build-info.outputs.java_version }}-alpine

      - name: Build
        uses: docker/build-push-action@v3
        if: |
          steps.snapshot-build-info.outputs.minecraft_version != env.LATEST_VERSION
          && steps.snapshot-build-info.outputs.server_url != null
        with:
          context: minecraft
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.snapshot-build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.snapshot-build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.snapshot-build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.snapshot-build-info.outputs.java_version }}-alpine

      - name: Push Latest
        uses: docker/build-push-action@v3
        if: |
          github.ref == 'refs/heads/main'
          && steps.snapshot-build-info.outputs.minecraft_version == env.LATEST_VERSION
          && steps.snapshot-build-info.outputs.server_url != null
        with:
          context: minecraft
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest-snapshot
            ${{ env.IMAGE_NAME }}:${{ steps.snapshot-build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.snapshot-build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.snapshot-build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.snapshot-build-info.outputs.java_version }}-alpine

      - name: Push
        uses: docker/build-push-action@v3
        if: |
          github.ref == 'refs/heads/main'
          && steps.snapshot-build-info.outputs.minecraft_version != env.LATEST_VERSION
          && steps.snapshot-build-info.outputs.server_url != null
        with:
          context: minecraft
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.snapshot-build-info.outputs.minecraft_version }}
          build-args: |
            MINECRAFT_VERSION=${{ steps.snapshot-build-info.outputs.minecraft_version }}
            SERVER_URL=${{ steps.snapshot-build-info.outputs.server_url }}
            JAVA_IMAGE=eclipse-temurin:${{ steps.snapshot-build-info.outputs.java_version }}-alpine
